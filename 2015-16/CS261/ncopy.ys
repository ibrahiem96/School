#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Name: Ibrahiem Mohammad
# Net-ID: imoham3
#
# Describe how and why you modified the baseline code
#
# loop unroll by a factor of 4 and perform leftover operations at the end
# in order to avoid bubbles or data dependencies I alternatively used r10 and r11 (rather than use more registers).
#
# 
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	andq %rdx,%rdx		# len <= 0?
	jle Done		# if so, goto Done:
	iaddq $-4, %rdx		# len = len - 4
	jl tail

Loop:

	mrmovq (%rdi), %r10	# read val from src...
	mrmovq 8(%rdi), %r11	# read val from src (add 4)
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle elem1		# if so, goto elem1:
	iaddq $1, %rax		# count++

elem1:

	rmmovq %r11, 8(%rsi)	# move src[1] to dst[1]
	andq %r11, %r11		# is src[1] > 0?
	jle elem2		# if not, jump to next elem
	iaddq $1, %rax		# count++

elem2:
	
	mrmovq 16(%rdi), %r10	# read val from src + 8
	mrmovq 24(%rdi), %r11	# read val from src + 12
	rmmovq %r10, 16(%rsi)	# move src[2] to dst[2]
	andq %r10, %r10		# is src[2] > 0? 
	jle elem3		# if not, jump to next elem
	iaddq $1, %rax		# count++

elem3:

	rmmovq %r11, 24(%rsi)	# move src[3] to dst[3]
	andq %r11, %r11		# is src[3] > 0?
	jle next		# if not, jump to next elem
	iaddq $1, %rax		# count++

next:
	
	iaddq $32, %rdi		# move through the next 4 elements of src
	iaddq $32, %rsi		# move through the next 4 elements of dst
	iaddq $-4, %rdx		# len = len - 4
	jge Loop		# if four are left, then repeat

tail:

	iaddq $4, %rdx			# get len

le1:
	
	iaddq $-1, %rdx			# len--
	jl Done
	mrmovq (%rdi), %r10		# perform leftover operations
	mrmovq 8(%rdi), %r11	
	rmmovq %r10, (%rsi)
	andq %r10, %r10					
	jle le2
	iaddq $1, %rax			# count++

le2:

	iaddq $-1, %rdx			# len--
	jl Done
	rmmovq %r11, 8(%rsi)	# perform leftover operations
	andq %r11, %r11
	jle le3
	iaddq $1, %rax			# count++

le3:
	
	iaddq $-1, %rdx			# len--
	jl Done
	mrmovq 16(%rdi), %r10	# perform leftover operations
	rmmovq %r10, 16(%rsi)
	andq %r10, %r10
	jle Done
	iaddq $1, %rax			# count++


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
