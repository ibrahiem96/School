Name: Ibrahiem Mohammad

	movslq  %edi, %rdi	//moves 4 bytes from edi to rdi. Assume rdi is h 				because it is the first argument.
        movslq  %esi, %rsi	//moves 4 bytes from esi to rsi. Assume rsi is i 				because it is the second argument. 
 
        movq    (%rcx), %rcx	//storing address of pointer dest.

        leaq    (%rdi,%rdi,2), %rax	//($rdi+$rdi*2) = rax. 
					rax = 3h (b/c rdi=h)

        movslq  %edx, %rdx	//move 4 bytes from edx to rdx. Assume rdx is j 					because it is the 3rd argument.

        addq    %rax, %rsi	//rax+rsi = rsi
				rsi = 3h + i

        leaq    (%rdx,%rsi,4), %rax	//(rdx+rsi*4) = rax
					rax = j + 4(3h + i)
					rax = j + 12h + 4i

        movq    %rcx, A(,%rax,8)	//($rax*8+A) = rcx
					rcx = 8*(j + 12h + 4i)+A

        movl    $960, %eax	//eax = 960
        ret


Since eax is the memory register for the pointer dest, it follows that 960 = 8*dest (b/c des is a long int).

So, to find the location of the elements in the array we use the formula:

				h*plane + i*col + j

960/8 = 120 (position of the element A[h][i][j] = dest)

120 = h*plane + i*col + j

120 = 12h + 4i + j + A

12h = h*plane //plane = row*col = 12
		row*4 = 12
		row = 3

4i = i*col = //col = 4
(j + A) = j //A = 0 

T is position for column, so T = 4
S is position for rows, so S = 3

Since dest = 120, we need 3*4*R = 120
Therefore, R = 10

T = 4
S = 3
R = 10

 